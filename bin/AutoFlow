#!/usr/bin/env ruby

ROOT_PATH=File.dirname(__FILE__)
$: << File.expand_path(File.join(ROOT_PATH, "..", "lib"))
$: << File.expand_path(File.join(ROOT_PATH, "..", "lib", "autoflow"))
$: << File.expand_path(File.join(ROOT_PATH, "..", "lib", "autoflow", "queue_managers"))

require 'optparse'
require 'autoflow'
require 'io/console'
require 'net/ssh'
require 'queue_manager'
require 'fileutils'
require 'git'

#################################################################################################
# METHODS
#################################################################################################
def get_templates(string_template)
        templates = string_template.split(',') 
        return templates
end

def get_repositories
    main_repository = File.join(ENV['HOME'], 'autoflow_templates')
    local_rep = File.join(main_repository, 'local')
    remote_rep = File.join(main_repository, 'remote')
    all_remote = Dir.glob(File.join(remote_rep, '*'))
    directories = [local_rep]
    directories.concat(ENV['WORKFLOW_REPOSITORY'].split(':')) if !ENV['WORKFLOW_REPOSITORY'].nil?
    directories.concat(all_remote)
    return directories
end

def exit_exec(message)
        puts message
        Process.exit(-1)
end

def list_repository_templates
        templates = []
        directories = get_repositories
        directories.each do |dir|
                templates.concat(Dir.entries(dir))
        end
        templates.delete('.')
        templates.delete('..')
        templates.delete('README.md') # From git remote repos
        templates.delete('.git') # From git remote repos
        return templates
end

def get_template_path(template)
        path = nil
        directories = get_repositories
        directories.each do |dir|
                if Dir.entries(dir).include?(template)
                        path = File.join(dir, template) 
                        break
                end
        end       
        return path
end

def get_description(path)
        File.open(path).each do |line|
                line.chomp!
                if line =~ /^#=/
                        line.gsub!('#=','')
                        puts line
                end
        end
end

#################################################################################################
# INPUT PARSING
#################################################################################################
options = {}
template_file = ''
optparse = OptionParser.new do |opts|
        options[:add] = nil
        opts.on( '-a', '--add STRING', 'Put a copy of any selected workflow template in repository' ) do |add|
                options[:add] = add
        end

        options[:additional_job_options] = nil
        opts.on( '-A', '--additional_job_options STRING', 'Additional option in queue system jobs. Format: "parameter:value"' ) do |opt|
                options[:additional_job_options] = opt.split(':')
        end

        options[:batch] = false
        opts.on( '-b', '--batch', 'Workflow execution using batch' ) do 
                options[:batch] = true
        end

        options[:cpus] = 16
        opts.on( '-c', '--cpus INTEGER', 'Max number of CPUs that can be used in all workflow' ) do |cpus|
                options[:cpus] = cpus.to_i
        end

        options[:comment] = false
        opts.on( '-C', '--comment_main_command', 'Comment first line of main command job' ) do 
                options[:comment] = true
        end

        options[:external_dependencies] = []
        opts.on( '-d', '--external_dependencies STRING', 'The workflow will start when indicated jobs are finished on queue system. Format: \'id1,id2,id3..\'') do |external_dependencies|
                options[:external_dependencies] = external_dependencies.split(',')
        end

        options[:retry] = false
        opts.on( '-f', '--force', 'Execute all jobs, including any job commented with %' ) do 
                options[:retry] = true
        end

        options[:graph] = nil
        opts.on( '-g', '--graph STRING', 'Draw a chart for the template. The workflow is not executed \'t\' use TIDs for box names \'f\' use folder names for boxes.' ) do |graph| 
                options[:graph] = graph
        end

        options[:get_template_repository] = nil
        opts.on( '-G', '--get_template_repository GIT_URL', 'Git url to get template from a remote repository' ) do |url| 
                options[:get_template_repository] = url
        end

        options[:identifier] = false
        opts.on( '-i', '--job_identifier STRING', 'Identifier tag for each launching script' ) do |identifier|
                options[:identifier] = identifier
        end

        options[:key_name] = false
        opts.on( '-k', '--use_key_name', ' Use job names as folder names' ) do
                options[:key_name] = true
        end

        options[:list] = nil
        opts.on( '-l', '--list_repository STRING', 'List template names in repository') do |name|
                options[:list] = name
        end

        options[:memory] = '4gb'
        opts.on( '-m', '--memory STRING', 'Max memory that can be allocated in a task' ) do |mem|
                options[:memory] = mem
        end

        options[:node_type] = nil
        opts.on( '-n', '--node_type STRING', 'Apply constraint attribute to tasks' ) do |node_type|
                options[:node_type] = node_type
        end

        options[:output] = 'exec'
        opts.on( '-o', '--output STRING', 'Define an output folder name' ) do |output|
                options[:output] = output
        end

        options[:pull] = nil
        opts.on( '-p', '--pull STRING', 'Get a copy of a workflow template in repository.' ) do |pull|
                options[:pull] = pull
        end    

        options[:remote] = false
        opts.on( '-r', '--remote', 'Connect with remote machine and launch the workflow' ) do 
                options[:remote] = true
                puts 'Host to connect and launch workflow:'
                host = gets.chomp
                puts 'User:'
                user = gets.chomp
                puts 'Password (hidden)'
                password = STDIN.noecho(&:gets).chomp
                options[:ssh] = Net::SSH.start(host, user, :password => password, :auth_methods => ['keyboard-interactive'])
                puts options[:ssh].exec!('hostname')
        end

        options[:use_ntasks] = false
        opts.on( '-s', '--use_ntasks', 'Use several nodes on execution' ) do 
                options[:use_ntasks] = true
        end

        options[:show_submit_command] = false
        opts.on( '-S', '--show_submit_command', 'Show the command line used to submit the job' ) do 
                options[:show_submit_command] = true
        end

        options[:time] = '20:00:00'
        opts.on( '-t', '--time STRING', 'Max time that can be needed in a task. Format: dd-hh:mm:ss' ) do |time|
                options[:time] = time
        end

        options[:use_multinode] = 0 
        opts.on( '-u', '--use_multinode INTEGER', 'For use several nodes on execution' ) do |use_multinode|
                options[:use_multinode] = use_multinode.to_i
        end     


        options[:verbose] = false
        opts.on( '-v', '--verbose', 'Show info without launching jobs' ) do 
                options[:verbose] = true
        end

        options[:Variables] = nil
        opts.on( '-V', '--Variables STRING', 'Variables to be parsed on template. Format: \'$variable_name1=value1,$variable_name2=value2,...\'' ) do |mem|
                options[:Variables] = [mem]
        end

        options[:workflow] = false
        opts.on( '-w', '--workflow FILE', 'Input workflow file' ) do |workflow|
                options[:workflow] = workflow
                template_file = workflow
        end


        # Set a banner, displayed at the top of the help screen.
        opts.banner = "Usage: AutoFlow.rb -w worflow_file -c n_cpus \n\n"

        # This displays the help screen
        opts.on( '-h', '--help', 'Display this screen' ) do
                puts opts
                exit
        end

end # End opts

# parse options and remove from ARGV
optparse.parse!

#################################################################################################
# MAIN
#################################################################################################
#Create repository
main_repository = File.join(ENV['HOME'], 'autoflow_templates')
local_rep = File.join(main_repository, 'local')
remote_rep = File.join(main_repository, 'remote')
Dir.mkdir(main_repository) if !File.exists?(main_repository)
Dir.mkdir(local_rep) if !File.exists?(local_rep)
Dir.mkdir(remote_rep) if !File.exists?(remote_rep)

#Move templates from legacy tree folder to current tree folder
Dir.glob(File.join(main_repository, '*')) { |file| FileUtils.mv(file, local_rep) if file != local_rep && file != remote_rep }

# Get git remote repos and include it in user templates
if !options[:get_template_repository].nil?
    fields = options[:get_template_repository].split(/\/+/)
    repo_name = fields.last.gsub('.git','')
    repo_author = fields[-2]
    local_name = "REM_#{repo_author}_#{repo_name}"
    Git.clone(options[:get_template_repository], local_name, :path => remote_rep)
    exit_exec('Remote template repository added as ' + local_name)
end

# List templates
templates_rep_names = list_repository_templates
if !options[:list].nil?
        if options[:list] == 'all'
                puts templates_rep_names
        else
                path = get_template_path(options[:list])
                get_description(path) if !path.nil?
        end
        exit_exec('')
end

# Get a template
if !options[:pull].nil?
        path = get_template_path(options[:pull])
        if !path.nil?
                FileUtils.cp(path, Dir.pwd)
        else
                exit_exec("Template not found: #{options[:pull]}")
        end
        exit_exec('')
end

# Upload a template
if !options[:add].nil? && File.exists?(options[:add])
        directories = get_repositories
        writable_dirs = []
        directories.each_with_index do |dir, i|
                if File.directory?(dir) && File.writable?(dir)
                       puts "#{i}\t#{dir}"
                       writable_dirs << dir 
                end
        end
        if !writable_dirs.empty?
                msg = ''
                puts "Select a directory"
                select = gets.chomp.to_i
                FileUtils.cp(options[:add], writable_dirs[select])
        else
                msg = "You don't have a writable directory"
        end
        exit_exec(msg)
end

# Merge templates
templates = get_templates(options[:workflow])
options[:workflow] = ''
options[:identifier] = "#{File.basename(templates.first)}_#{Time.new.to_i}" if !options[:identifier]

if !options[:workflow]
        exit_exec('Workflow not especified')
else
        templates.each do |template|
                if  !File.exists?(template) && !templates_rep_names.empty? && !templates_rep_names.include?(template)
                        exit_exec("Workflow not found: #{template}")
                        Process.exit(-1)
                else
                        if File.exists?(template)
                                path = template
                        else
                                path = get_template_path(template)
                        end
                        options[:workflow] += File.open(path).read+"\n"
                end
        end
end

# Set local or remote execution
if options[:remote]
        main_path = options[:ssh].exec!('pwd').chomp
else
        main_path = Dir.pwd
end

# Set output directory
if options[:output] == 'exec'
        exec_folder = File.join(main_path,'exec')
else
        exec_folder = options[:output]       
        exec_folder = File.join(main_path, options[:output]) if exec_folder[0] != '/' && exec_folder[0] != '~'
end 

#--------------------------------------------------------------------------------
# Flow parse
#--------------------------------------------------------------------------------
stack = Stack.new(exec_folder, options)
stack.parse!
 
#--------------------------------------------------------------------------------
# Flow exec
#--------------------------------------------------------------------------------
if !options[:graph].nil?
        stack.draw(template_file, options[:graph])
else
        stack.inspect if options[:verbose]
        stack.comment_main_command if options[:comment]
        options[:write_sh] = true # Set in flow logger to FALSE, it is used for relaunch failed jobs 
        manager = QueueManager.select_queue_manager(stack.exec_folder, options, stack.jobs, stack.persist_variables)
        manager.exec
end
options[:ssh].close if options[:remote]
